{% extends "base.html.twig" %}

{% block content %}
<div
	class="min-h-screen bg-[#232323]">
	<!-- Header -->
	<div class="bg-[#232323] border-b border-white/10">
		<div class="max-w-[1440px] mx-auto px-4 py-6">
			<div class="flex items-center justify-between mb-6">
				<div>
					<h1 class="text-3xl font-bold text-white ">Ticket Management</h1>
					<p class="text-gray-400  text-sm mt-1">
						Manage and track all support tickets
					</p>
				</div>
				<button onclick="openCreateModal()" class="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
					<i data-lucide="plus" class="h-4 w-4"></i>
					<span>Create Ticket</span>
				</button>
			</div>

			<!-- Statistics -->
			<div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
				<div class="bg-white/5 rounded-lg p-4 border border-white/10">
					<div class="text-2xl font-bold text-white " id="statTotal">0</div>
					<div class="text-gray-400  text-sm">Total Tickets</div>
				</div>
				<div class="bg-white/5 rounded-lg p-4 border border-white/10">
					<div class="text-2xl font-bold text-red-400 " id="statOpen">0</div>
					<div class="text-gray-400  text-sm">Open</div>
				</div>
				<div class="bg-white/5 rounded-lg p-4 border border-white/10">
					<div class="text-2xl font-bold text-yellow-400 " id="statInProgress">0</div>
					<div class="text-gray-400  text-sm">In Progress</div>
				</div>
				<div class="bg-white/5 rounded-lg p-4 border border-white/10">
					<div class="text-2xl font-bold text-green-400 " id="statClosed">0</div>
					<div class="text-gray-400  text-sm">Closed</div>
				</div>
			</div>

			<!-- Search and Filter -->
			<div class="flex flex-col md:flex-row gap-4">
				<div class="flex-1 relative">
					<i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400"></i>
					<input type="text" id="searchInput" placeholder="Search tickets by title, description, or assignee..." oninput="filterTickets()" class="w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-400"/>
				</div>
				<div class="flex items-center space-x-2">
					<i data-lucide="filter" class="h-4 w-4 text-gray-400"></i>
					<select id="statusFilter" onchange="filterTickets()" class="px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white focus:outline-none focus:border-blue-400">
						<option value="all" class="bg-[#232323]">All Status</option>
						<option value="open" class="bg-[#232323]">Open</option>
						<option value="in_progress" class="bg-[#232323]">In Progress</option>
						<option value="closed" class="bg-[#232323]">Closed</option>
					</select>
				</div>
			</div>
		</div>
	</div>

	<!-- Main Content -->
	<main
		class="max-w-[1440px] mx-auto px-4 py-8">
		<!-- Tickets Grid -->
		<div
			id="ticketsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"><!-- Tickets will be loaded here -->
		</div>
	</main>
</div>

<!-- Create Ticket Modal -->
<div id="createModal" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50">
	<div class="bg-[#232323] rounded-lg p-6 w-full max-w-md mx-4">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-xl font-bold text-white ">Create New Ticket</h2>
			<button onclick="closeCreateModal()" class="text-gray-400 hover:text-white transition-colors">
				<i data-lucide="x" class="h-5 w-5"></i>
			</button>
		</div>

		<form id="createForm" class="space-y-4">
			<div>
				<label class="block text-white  text-sm mb-2">Title *</label>
				<input type="text" id="ticketTitle" required class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-400" placeholder="Enter ticket title"/>
			</div>

			<div>
				<label class="block text-white  text-sm mb-2">Description</label>
				<textarea id="ticketDescription" rows="3" class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-400 resize-none" placeholder="Enter ticket description"></textarea>
			</div>

			<div>
				<label class="block text-white  text-sm mb-2">Status *</label>
				<select id="ticketStatus" required class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white focus:outline-none focus:border-blue-400">
					<option value="open">Open</option>
					<option value="in_progress">In Progress</option>
					<option value="closed">Closed</option>
				</select>
			</div>

			<div>
				<label class="block text-white  text-sm mb-2">Priority</label>
				<select id="ticketPriority" class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white focus:outline-none focus:border-blue-400">
					<option value="low">Low</option>
					<option value="medium">Medium</option>
					<option value="high">High</option>
					<option value="urgent">Urgent</option>
				</select>
			</div>

			<div>
				<label class="block text-white  text-sm mb-2">Assignee</label>
				<input type="text" id="ticketAssignee" class="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white placeholder-gray-400 focus:outline-none focus:border-blue-400" placeholder="Enter assignee name"/>
			</div>

			<div class="flex space-x-3 pt-4">
				<button type="button" onclick="closeCreateModal()" class="flex-1 px-4 py-2 border border-white/20 text-white rounded-md hover:bg-white/10 transition-colors">
					Cancel
				</button>
				<button type="submit" class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
					Create Ticket
				</button>
			</div>
		</form>
	</div>
</div>

<script>
	// Check session
		const sessionData = localStorage.getItem('ticketapp_session');
		if (!sessionData) {
		    window.toast.error('Please log in to access ticket management');
		    window.location.href = '/auth?mode=login';
		} else {
		    const session = JSON.parse(sessionData);
		    
		    // Load and display tickets
		    function loadTickets() {
		        const tickets = JSON.parse(localStorage.getItem('tickets_' + session.user.id) || '[]');
		        displayTickets(tickets);
		        updateStats(tickets);
		        lucide.createIcons();
		    }
		    
		    function displayTickets(tickets) {
		        const container = document.getElementById('ticketsContainer');
		        if (tickets.length === 0) {
		            container.innerHTML = '<div class="col-span-full text-center py-12"><p class="text-gray-400 text-lg">No tickets found</p><p class="text-gray-500 text-sm mt-2">Create your first ticket to get started</p></div>';
		        } else {
		            container.innerHTML = tickets.map(ticket => `
		                <div class="bg-white/5 rounded-lg p-4 border border-white/10 hover:bg-white/10 transition-colors">
		                    <div class="flex items-start justify-between mb-3">
		                        <div class="flex-1">
		                            <h3 class="text-white font-semibold text-sm mb-1">#${ticket.id} - ${ticket.title}</h3>
		                            <div class="flex items-center space-x-2">
		                                <span class="px-2 py-1 rounded-full text-xs text-white ${getStatusColor(ticket.status)}">${ticket.status.replace('_', ' ').toUpperCase()}</span>
		                                ${ticket.priority ? `<span class="px-2 py-1 rounded-full text-xs text-white ${getPriorityColor(ticket.priority)}">${ticket.priority.toUpperCase()}</span>` : ''}
		                            </div>
		                        </div>
		                        <div class="flex items-center space-x-2">
		                            <button onclick="deleteTicket('${ticket.id}')" class="p-1 text-gray-400 hover:text-red-400 transition-colors" title="Delete ticket">
		                                <i data-lucide="trash-2" class="h-4 w-4"></i>
		                            </button>
		                        </div>
		                    </div>
		                    ${ticket.description ? `<p class="text-gray-300 text-xs mb-3 line-clamp-2">${ticket.description}</p>` : ''}
		                    <div class="flex items-center justify-between text-xs text-gray-400">
		                        <div class="flex items-center space-x-4">
		                            ${ticket.assignee ? `<div class="flex items-center space-x-1"><i data-lucide="user" class="h-3 w-3"></i><span>${ticket.assignee}</span></div>` : ''}
		                            <div class="flex items-center space-x-1"><i data-lucide="calendar" class="h-3 w-3"></i><span>${new Date(ticket.createdAt).toLocaleDateString()}</span></div>
		                        </div>
		                    </div>
		                </div>
		            `).join('');
		        }
		    }
		    
		    function updateStats(tickets) {
		        document.getElementById('statTotal').textContent = tickets.length;
		        document.getElementById('statOpen').textContent = tickets.filter(t => t.status === 'open').length;
		        document.getElementById('statInProgress').textContent = tickets.filter(t => t.status === 'in_progress').length;
		        document.getElementById('statClosed').textContent = tickets.filter(t => t.status === 'closed').length;
		    }
		    
		    function getStatusColor(status) {
		        switch(status) {
		            case 'open': return 'bg-red-500';
		            case 'in_progress': return 'bg-yellow-500';
		            case 'closed': return 'bg-green-500';
		            default: return 'bg-gray-500';
		        }
		    }
		    
		    function getPriorityColor(priority) {
		        switch(priority) {
		            case 'low': return 'bg-blue-500';
		            case 'medium': return 'bg-yellow-500';
		            case 'high': return 'bg-orange-500';
		            case 'urgent': return 'bg-red-500';
		            default: return 'bg-gray-500';
		        }
		    }
		    
		    function filterTickets() {
		        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
		        const statusFilter = document.getElementById('statusFilter').value;
		        const tickets = JSON.parse(localStorage.getItem('tickets_' + session.user.id) || '[]');
		        
		        const filtered = tickets.filter(ticket => {
		            const matchesSearch = ticket.title.toLowerCase().includes(searchTerm) ||
		                (ticket.description || '').toLowerCase().includes(searchTerm) ||
		                (ticket.assignee || '').toLowerCase().includes(searchTerm);
		            const matchesStatus = statusFilter === 'all' || ticket.status === statusFilter;
		            return matchesSearch && matchesStatus;
		        });
		        
		        displayTickets(filtered);
		    }
		    
		    function openCreateModal() {
		        document.getElementById('createModal').classList.remove('hidden');
		        lucide.createIcons();
		    }
		    
		    function closeCreateModal() {
		        document.getElementById('createModal').classList.add('hidden');
		        document.getElementById('createForm').reset();
		    }
		    
		     function deleteTicket(id) {
		        if (confirm('Are you sure you want to delete this ticket?')) {
		            const tickets = JSON.parse(localStorage.getItem('tickets_' + session.user.id) || '[]');
		            const filtered = tickets.filter(t => t.id !== id);
		            localStorage.setItem('tickets_' + session.user.id, JSON.stringify(filtered));
		            window.toast.success('Ticket deleted successfully');
		            loadTickets();
		        }
		    }
		    
		    // Handle form submission
		    document.getElementById('createForm').addEventListener('submit', (e) => {
		        e.preventDefault();
		        const tickets = JSON.parse(localStorage.getItem('tickets_' + session.user.id) || '[]');
		        const newTicket = {
		            id: Date.now().toString(),
		            title: document.getElementById('ticketTitle').value,
		            description: document.getElementById('ticketDescription').value,
		            status: document.getElementById('ticketStatus').value,
		            priority: document.getElementById('ticketPriority').value,
		            assignee: document.getElementById('ticketAssignee').value,
		            createdAt: new Date().toISOString(),
		            updatedAt: new Date().toISOString()
		        };
		        tickets.push(newTicket);
		        localStorage.setItem('tickets_' + session.user.id, JSON.stringify(tickets));
		        window.toast.success('Ticket created successfully');
		        loadTickets();
		        closeCreateModal();
		    });
		    
		    // Initial load
		    loadTickets();
		}
		</script>
		{% endblock %}
